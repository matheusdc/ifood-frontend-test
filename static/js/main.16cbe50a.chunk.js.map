{"version":3,"sources":["components/SpotifyLoginButton/spotifyLogo.png","actions/types.js","reducers/filters.js","reducers/playlists.js","reducers/index.js","services/SpotifyApi.js","constants/index.js","components/defaultFilters.js","actions/saga.js","store.js","components/PlaylistCard.js","actions/index.js","components/Playlists.js","services/FilterApi.js","components/Filters/DynamicFilters.js","components/Filters/Filters.js","components/Filters/index.js","pages/Home.js","components/SpotifyLoginButton/SpotifyLogin.js","services/SpotifyAuthenticationService.js","pages/Login.js","components/SessionManager.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GET_PLAYLISTS_REQUEST","GET_PLAYLISTS_FAILURE","GET_PLAYLISTS_SUCCESS","SET_FILTERS","INITIAL_STATE","keyword","filters","state","arguments","length","undefined","_ref","type","payload","TYPES","Object","objectSpread","loading","error","playlists","items","combineReducers","SpotifyApi","axios","create","baseURL","getPlaylists","params","get","locale","country","interceptors","request","use","config","token","sessionStorage","getItem","headers","Authorization","concat","defaultFilters","navigator","language","replace","_locale$split","split","slicedToArray","timestamp","Date","toISOString","offset","limit","workerGetPlaylists","watchGetPlaylists","watchSetFilters","rootSaga","_ref2","regenerator_default","a","wrap","_context","prev","next","select","sent","objectWithoutProperties","keys","put","call","data","t0","stop","_marked","_context2","takeEvery","_marked2","_context4","_marked4","_context5","all","_marked5","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","composeWithDevTools","applyMiddleware","run","Meta","Card","PlaylistCard","name","image","tracks","link","react_default","createElement","href","card_default","hoverable","style","marginTop","cover","alt","src","title","description","action","dispatch","setFilters","connect","_ref3","useEffect","spin_default","tip","spinning","height","alert_default","message","showIcon","row_default","gutter","filter","playlist","toLocaleLowerCase","includes","map","id","images","externalUrls","external_urls","col_default","key","xs","xl","components_PlaylistCard","url","total","spotify","FilterApi","Option","Select","Item","Form","_ref6","filterFields","onChange","value","defineProperty","values","sm","label","select_default","width","placeholder","optionName","SelectComponent","validation","primitiveType","entityType","_ref5","date_picker_default","showTime","moment","DatePickerComponent","_ref4","_ref4$validation","min","max","input_number_default","InputNumberComponent","Search","Input","Panel","Collapse","Filters","_useState","useState","_useState2","setFilterFields","_useState3","_useState4","loadingAdvancedFilters","setLoadingAdvancedFilters","then","Filters_Item","size","event","target","collapse_default","bordered","header","Filters_DynamicFilters","Title","Tipography","Home","justify","fontSize","components_Filters","components_Playlists","SpotifyLogin","tabstop","className","process","aria-label","spotifyLogo","Login","components_SpotifyLoginButton_SpotifyLogin","SessionManager","setToken","qs","parse","window","location","hash","substr","access_token","setItem","getTokenFromUrl","pages_Home","src_pages_Login","App","es","components_SessionManager","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gRCA3BC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAwB,wBAGxBC,EAAc,cCHdC,EAAgB,CAC3BC,QAAS,IAoBIC,EAjBC,WAA8C,IAA7CC,EAA6CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArCJ,EAAqCO,EAAAH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAApBE,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,QAC9C,OAAQD,GACN,IDJuB,cCSvB,KAAKE,EACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFR,EACAM,GAEP,QACE,OAAON,ICjBAH,EAAgB,CAC3Ba,SAAS,EACTC,OAAO,EACPC,UAAW,IA8BEA,EA3BG,WAA8C,IAA7CZ,EAA6CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArCJ,EAAqCO,EAAAH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAApBE,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,QAChD,OAAQD,GACN,KAAKE,EACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFR,EADL,CAEEU,SAAS,EACTC,OAAO,IAEX,KAAKJ,EACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFR,EADL,CAEEW,OAAO,EACPD,SAAS,EACTE,UAAW,KAEf,KAAKL,EACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFR,EADL,CAEEU,SAAS,EACTC,OAAO,EACPC,UAAWN,EAAQO,QAEvB,QACE,OAAOb,IC1BEc,4BAAgB,CAC7Bf,UACAa,iECHIG,EAAaC,IAAMC,OAAO,CAC9BC,QCCkC,4BDevBC,EAAe,SAACC,GAM3B,OAAOL,EAAWM,IAAI,gCAAiC,CAAED,OAAOZ,OAAAC,EAAA,EAAAD,CAAA,GAL1C,CACpBc,OAAQ,QACRC,QAAS,MAG6EH,MAG1FL,EAAWS,aAAaC,QAAQC,IAtBL,SAACC,GAC1B,IAAMC,EAAQC,eAAeC,QAAQ,SAE/BC,EAAU,CACdA,QAAS,CAAEC,cAAa,UAAAC,OAAYL,KAGtC,OAAOpB,OAAAC,EAAA,EAAAD,CAAA,GACFmB,EACAI,KAeQhB,YElBAmB,EAdQ,WACrB,IAAMZ,EAASa,UAAUC,SAASC,QAAQ,IAAK,KADpBC,EAEPhB,EAAOiB,MAAM,KAGjC,MAAO,CACLjB,SACAC,QAPyBf,OAAAgC,EAAA,EAAAhC,CAAA8B,EAAA,MAQzBG,WALgB,IAAIC,MAAOC,cAM3BC,OAAQ,EACRC,MAAO,eCDMC,cAiBAC,cASAC,cAIQC,GA9BlB,SAAUH,IAAV,IAAA1C,EAAAL,EAAAmD,EAAAtC,EAAA,OAAAuC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE6B,OAF7BF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEmCC,YAAO,SAAAzD,GAAK,OAAIA,EAAMD,UAFzD,UAAAK,EAAAkD,EAAAI,KAAAtD,EAEKN,QAAYC,EAFjBS,OAAAmD,EAAA,EAAAnD,CAAAJ,EAAA,aAIgBI,OAAOoD,KAAK7D,GAASG,OAJrC,CAAAoD,EAAAE,KAAA,SAMD,OANCF,EAAAE,KAAA,GAMKK,YAAI,CAAExD,KAAME,EAAmBD,QAAS4B,MAN7C,QAS6B,OAT7BoB,EAAAE,KAAA,GASmCM,YAAK3C,EAAcpB,GATtD,QAWH,OAXGmD,EAAAI,EAAAI,KASa9C,EATbsC,EASKa,KAAQnD,UATb0C,EAAAE,KAAA,GAWGK,YAAI,CAAExD,KAAME,EAA6BD,QAASM,IAXrD,QAAA0C,EAAAE,KAAA,iBAaH,OAbGF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAAAA,EAAAE,KAAA,GAaGK,YAAI,CAAExD,KAAME,IAbf,yBAAA+C,EAAAW,SAAAC,EAAA,eAiBA,SAAUnB,IAAV,OAAAI,EAAAC,EAAAC,KAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACL,OADKW,EAAAX,KAAA,EACCY,YAAU7D,EAA6BuC,GADxC,wBAAAqB,EAAAF,SAAAI,GASA,SAAUrB,IAAV,OAAAG,EAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OACL,OADKc,EAAAd,KAAA,EACCY,YAAU7D,EAAmBuC,GAD9B,wBAAAwB,EAAAL,SAAAM,GAIQ,SAAUtB,IAAV,OAAAE,EAAAC,EAAAC,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OACb,OADagB,EAAAhB,KAAA,EACPiB,YAAI,CACR1B,IACAC,MAHW,wBAAAwB,EAAAP,SAAAS,GChCf,IAAMC,EAAiBC,cAEjBC,EAAQC,sBAAYC,EAASC,8BACjCC,0BAAgBN,KAGlBA,EAAeO,IAAIjC,GAEJ4B,iLCTPM,WAASC,KAATD,MA0BOE,GAxBM,SAAAjF,GAAA,IACnBkF,EADmBlF,EACnBkF,KACAC,EAFmBnF,EAEnBmF,MACAC,EAHmBpF,EAGnBoF,OACAC,EAJmBrF,EAInBqF,KAJmB,OAMjBC,EAAAtC,EAAAuC,cAAA,KAAGC,KAAMH,GACPC,EAAAtC,EAAAuC,cAACE,GAAAzC,EAAD,CACE0C,WAAS,EACTC,MAAO,CAAEC,UAAW,IACpBC,MAAOP,EAAAtC,EAAAuC,cAAA,OAAKO,IAAKZ,EAAMa,IAAKZ,KAE5BG,EAAAtC,EAAAuC,cAACR,GAAD,CAAMiB,MAAOd,EAAMe,YAAW,GAAApE,OAAKuD,EAAL,oBCjBzBc,GAAS,SAACjG,EAAMC,GAAP,OAAmBuE,EAAM0B,SAAS,CAAElG,OAAMC,aAInDkG,GAAa,SAAApF,GAAM,OAAIkF,GAAO/F,EAAmBa,ICkE/CqF,eAPS,SAAAC,GAAA,IAAG9F,EAAH8F,EAAG9F,UAAWb,EAAd2G,EAAc3G,QAAd,MAA6B,CACnDa,UAAWA,EAAUA,UACrBD,MAAOC,EAAUD,MACjBD,QAASE,EAAUF,QACnBZ,QAASC,EAAQD,UAGJ2G,CArDG,SAAArG,GAEZ,IADJQ,EACIR,EADJQ,UAAWd,EACPM,EADON,QAASY,EAChBN,EADgBM,QAASC,EACzBP,EADyBO,MAE7BgG,oBAAU,WDlBgB,IAAAvF,EAAUkF,GAAO/F,EAA6Ba,ICoBrE,IAIH,OACEsE,EAAAtC,EAAAuC,cAACiB,EAAAxD,EAAD,CAAMyD,IAAI,gBAAgBC,SAAUpG,EAASqF,MAAO,CAAEgB,OAAQ,MAC3DpG,GACC+E,EAAAtC,EAAAuC,cAACqB,EAAA5D,EAAD,CACE2C,MAAO,CAAEC,UAAW,IACpBiB,QAAQ,yBACRZ,YAAY,mFACZhG,KAAK,QACL6G,UAAQ,IAGZxB,EAAAtC,EAAAuC,cAACwB,EAAA/D,EAAD,CAAKgE,OAAQ,IACVxG,EAAUyG,OAde,SAAAC,GAAQ,OAAIA,EAAShC,KAAKiC,oBAAoBC,SAAS1H,KActC2H,IAAI,SAAAvE,GAAA,IAC7CwE,EAD6CxE,EAC7CwE,GAAIpC,EADyCpC,EACzCoC,KAAMqC,EADmCzE,EACnCyE,OAAQnC,EAD2BtC,EAC3BsC,OAAuBoC,EADI1E,EACnB2E,cADmB,OAG7CnC,EAAAtC,EAAAuC,cAACmC,EAAA1E,EAAD,CAAK2E,IAAKL,EAAIM,GAAI,GAAIC,GAAI,GACxBvC,EAAAtC,EAAAuC,cAACuC,GAAD,CACER,GAAIA,EACJpC,KAAMA,EACNC,MAAOoC,EAAO,GAAGQ,IACjB3C,OAAQA,EAAO4C,MACf3C,KAAMmC,EAAaS,gGC9C3BC,WAAYtH,IAAMC,OAAO,CAC7BC,QPAiC,oKQqB3BqH,WAAWC,KAAXD,QACAE,GAASC,KAATD,KAyGOhC,eAJS,SAAAkC,GAAA,MAAkB,CACxC5I,QADsB4I,EAAG5I,UAIZ0G,CAvGQ,SAAArG,GAA+B,IAA5BL,EAA4BK,EAA5BL,QAAS6I,EAAmBxI,EAAnBwI,aAC3BC,EAAW,SAACnB,EAAIoB,GACpBtC,GAAWhG,OAAAuI,GAAA,EAAAvI,CAAA,GAAGkH,EAAKoB,KAqFrB,OACEpD,EAAAtC,EAAAuC,cAACwB,EAAA/D,EAAD,CAAKgE,OAAQ,GACVwB,EAAanB,IA1BY,SAACJ,GAI7B,OAHmB7G,OAAOoD,KAAKyD,GAEMG,SAAS,UA7DxB,SAAAtE,GAAA,IAEtBwE,EAFsBxE,EAEtBwE,GAAIpC,EAFkBpC,EAElBoC,KAAM0D,EAFY9F,EAEZ8F,OAFY,OAIpBtD,EAAAtC,EAAAuC,cAACmC,EAAA1E,EAAD,CAAK6F,GAAI,GAAIhB,GAAI,EAAGF,IAAKL,GACvBhC,EAAAtC,EAAAuC,cAAC8C,GAAD,CAAMS,MAAO5D,GACXI,EAAAtC,EAAAuC,cAACwD,GAAA/F,EAAD,CACEsE,GAAIA,EACJmB,SAAU,SAAAC,GAAK,OAAID,EAASnB,EAAIoB,IAChCA,MAAO/I,EAAQ2H,GACf3B,MAAO,CAAEqD,MAAO,QAChBC,YAAa/D,GAEZ0D,EAAOvB,IAAI,SAAAf,GAAA,IAAS4C,EAAT5C,EAAGpB,KAAkBwD,EAArBpC,EAAqBoC,MAArB,OACVpD,EAAAtC,EAAAuC,cAAC4C,GAAD,CAAQR,IAAKuB,EAAYR,MAAOA,GAAQQ,QAiDzCC,CAAgBlC,GAIa,WAApCA,EAAOmC,WAAWC,eACkB,cAAjCpC,EAAOmC,WAAWE,WA5BG,SAAAC,GAAA,IAE1BjC,EAF0BiC,EAE1BjC,GAAIpC,EAFsBqE,EAEtBrE,KAFsB,OAIxBI,EAAAtC,EAAAuC,cAACmC,EAAA1E,EAAD,CAAK6F,GAAI,GAAIhB,GAAI,EAAGF,IAAKL,GACvBhC,EAAAtC,EAAAuC,cAAC8C,GAAD,CAAMS,MAAO5D,GACXI,EAAAtC,EAAAuC,cAACiE,GAAAxG,EAAD,CACEsE,GAAIA,EACJmC,UAAQ,EACRhB,SAAU,SAAAC,GAAK,OAAID,EAASnB,EAAIoB,EAAMnG,gBACtCmG,MAAOgB,KAAO/J,EAAQ2H,IACtB2B,YAAa/D,EACbS,MAAO,CAAEqD,MAAO,YAmBfW,CAAoB1C,GAGiC,YAApCA,EAAOmC,WAAWC,cArDjB,SAAAO,GAAA,IAE3BtC,EAF2BsC,EAE3BtC,GAAIpC,EAFuB0E,EAEvB1E,KAFuB2E,EAAAD,EAEjBR,WAAcU,EAFGD,EAEHC,IAAKC,EAFFF,EAEEE,IAFF,OAIzBzE,EAAAtC,EAAAuC,cAACmC,EAAA1E,EAAD,CAAK6F,GAAI,GAAIhB,GAAI,EAAGF,IAAKL,GACvBhC,EAAAtC,EAAAuC,cAAC8C,GAAD,CAAMS,MAAO5D,GACXI,EAAAtC,EAAAuC,cAACyE,GAAAhH,EAAD,CACEsE,GAAIA,EACJoB,MAAO/I,EAAQ2H,GACfwC,IAAKA,EACLC,IAAKA,EACLtB,SAAU,SAAAC,GAAK,OAAID,EAASnB,EAAIoB,IAChCO,YAAa/D,EACbS,MAAO,CAAEqD,MAAO,YA0CfiB,CAAqBhD,GAGvB,UC9FHiD,GAAWC,KAAXD,OACA7B,GAASC,KAATD,KACA+B,GAAUC,KAAVD,MCnBOE,GDqBC,WAAM,IAAAC,EACoBC,mBAAS,IAD7BC,EAAArK,OAAAgC,EAAA,EAAAhC,CAAAmK,EAAA,GACb/B,EADaiC,EAAA,GACCC,EADDD,EAAA,GAAAE,EAEwCH,oBAAS,GAFjDI,EAAAxK,OAAAgC,EAAA,EAAAhC,CAAAuK,EAAA,GAEbE,EAFaD,EAAA,GAEWE,EAFXF,EAAA,GAWpB,OAPArE,oBAAU,WFnBoB2B,GAAUjH,IAAI,KEoB7B8J,KAAK,SAAA/K,GAA2B,IAAhBL,EAAgBK,EAAxB2D,KAAQhE,QAC3BmL,GAA0B,GAC1BJ,EAAgB/K,MAEjB,IAGD2F,EAAAtC,EAAAuC,cAAA,WACED,EAAAtC,EAAAuC,cAACyF,GAAD,CAAMlC,MAAM,oBACVxD,EAAAtC,EAAAuC,cAAC2E,GAAD,CACE5C,GAAG,SACH2D,KAAK,QACLhC,YAAY,8BACZR,SAAU,SAAAyC,GAAK,OAAI9E,GAAW,CAAE1G,QAASwL,EAAMC,OAAOzC,YAI1DpD,EAAAtC,EAAAuC,cAACiB,EAAAxD,EAAD,CAAM0D,SAAUmE,EAAwBlF,MAAO,CAAEgB,OAAQ,KACvDrB,EAAAtC,EAAAuC,cAAC6F,GAAApI,EAAD,CAAUqI,UAAU,GAClB/F,EAAAtC,EAAAuC,cAAC6E,GAAD,CAAOkB,OAAO,wBACZhG,EAAAtC,EAAAuC,cAACgG,GAAD,CAAgB/C,aAAcA,SElClCgD,GAAUC,IAAVD,MAcOE,GAZF,kBACXpG,EAAAtC,EAAAuC,cAACwB,EAAA/D,EAAD,CAAK/C,KAAK,OAAO0L,QAAQ,UACvBrG,EAAAtC,EAAAuC,cAACmC,EAAA1E,EAAD,CAAK4E,GAAI,GAAIC,GAAI,IACfvC,EAAAtC,EAAAuC,cAACiG,GAAD,CAAO7F,MAAO,CAAEC,UAAW,GAAIgG,SAAU,WAAzC,aACAtG,EAAAtC,EAAAuC,cAAA,WACED,EAAAtC,EAAAuC,cAACsG,GAAD,MACAvG,EAAAtC,EAAAuC,cAACuG,GAAD,+BCTOC,WAPM,kBACnBzG,EAAAtC,EAAAuC,cAAA,KAAGyG,QAAQ,IAAIC,UAAU,gBAAgBzG,KCWjB,GAAA3D,ObfG,yCaeH,eAAAA,OblBDqK,mCakBC,kBAAArK,ObjBEqK,kDaiBF,0CDVtB5G,EAAAtC,EAAAuC,cAAA,QAAM4G,aAAW,qBAAjB,cACA7G,EAAAtC,EAAAuC,cAAA,OAAK0G,UAAU,sBAAsBlG,IAAKqG,KAAatG,IAAI,oBEQhDuG,WAZD,kBACZ/G,EAAAtC,EAAAuC,cAAA,WAAS0G,UAAU,mBACjB3G,EAAAtC,EAAAuC,cAAA,UAAQ0G,UAAU,0BAAlB,aAGA3G,EAAAtC,EAAAuC,cAAA,KAAG0G,UAAU,gCAAb,sEAGA3G,EAAAtC,EAAAuC,cAAC+G,GAAD,SCaWC,GAnBQ,WAAM,IAAAhC,EACDC,mBAAS,MADRC,EAAArK,OAAAgC,EAAA,EAAAhC,CAAAmK,EAAA,GACpB/I,EADoBiJ,EAAA,GACb+B,EADa/B,EAAA,GAG3BlE,oBAAU,WACRiG,EFH2B,WAC7B,IACMhL,EADkBiL,IAAGC,MAAMC,OAAOC,SAASC,KAAKC,OAAO,IAC/BC,cAAgB,KAK9C,OAJAtL,eAAeuL,QAAQ,QAASxL,GAEhCmL,OAAOC,SAASC,KAAO,GAEhBrL,EEJIyL,KACR,IAIH,OACE3H,EAAAtC,EAAAuC,cAAA,WAHsC,OAAV/D,EAKtB8D,EAAAtC,EAAAuC,cAAC2H,GAAD,MACA5H,EAAAtC,EAAAuC,cAAC4H,GAAD,QCPKC,GANH,kBACV9H,EAAAtC,EAAAuC,cAAC8H,EAAA,EAAD,CAAU5I,MAAOA,GACfa,EAAAtC,EAAAuC,cAAC+H,GAAD,QCGgBC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAOrI,EAAAtC,EAAAuC,cAACqI,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB/L,WACrBA,UAAUgM,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.16cbe50a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotifyLogo.31bad8d4.png\";","export const GET_PLAYLISTS_REQUEST = 'GET_PLAYLISTS_REQUEST';\nexport const GET_PLAYLISTS_FAILURE = 'GET_PLAYLISTS_FAILURE';\nexport const GET_PLAYLISTS_SUCCESS = 'GET_PLAYLISTS_SUCCESS';\n\nexport const GET_FILTERS = 'GET_FILTERS';\nexport const SET_FILTERS = 'SET_FILTERS';\n","import * as TYPES from '../actions/types';\n\nexport const INITIAL_STATE = {\n  keyword: '',\n};\n\nconst filters = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case TYPES.GET_FILTERS:\n      return {\n        ...state,\n        ...payload,\n      };\n    case TYPES.SET_FILTERS:\n      return {\n        ...state,\n        ...payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filters;\n","import * as TYPES from '../actions/types';\n\nexport const INITIAL_STATE = {\n  loading: true,\n  error: false,\n  playlists: [],\n};\n\nconst playlists = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case TYPES.GET_PLAYLISTS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: false,\n      };\n    case TYPES.GET_PLAYLISTS_FAILURE:\n      return {\n        ...state,\n        error: true,\n        loading: false,\n        playlists: [],\n      };\n    case TYPES.GET_PLAYLISTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        playlists: payload.items,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default playlists;\n","import { combineReducers } from 'redux';\n\nimport filters from './filters';\nimport playlists from './playlists';\n\nexport default combineReducers({\n  filters,\n  playlists,\n});\n","import axios from 'axios';\n\nimport { SPOTIFY_API_BASE_URL } from '../constants';\n\nconst SpotifyApi = axios.create({\n  baseURL: SPOTIFY_API_BASE_URL,\n});\n\nconst authorizationSetup = (config) => {\n  const token = sessionStorage.getItem('token');\n\n  const headers = {\n    headers: { Authorization: `Bearer ${token}` },\n  };\n\n  return {\n    ...config,\n    ...headers,\n  };\n};\n\nexport const getPlaylists = (params) => {\n  const defaultParams = {\n    locale: 'en_US',\n    country: 'US',\n  };\n\n  return SpotifyApi.get('/v1/browse/featured-playlists', { params: { ...defaultParams, ...params } });\n};\n\nSpotifyApi.interceptors.request.use(authorizationSetup);\n\nexport default SpotifyApi;\n","export const CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nexport const REDIRECT_URI = process.env.REACT_APP_REDIRECT_URL;\n\nexport const AUTH_ENDPOINT = 'https://accounts.spotify.com/authorize';\n\nexport const FILTER_API_BASE_URL = 'https://www.mocky.io/v2/5a25fade2e0000213aa90776';\nexport const SPOTIFY_API_BASE_URL = 'https://api.spotify.com';\n","const defaultFilters = () => {\n  const locale = navigator.language.replace('-', '_');\n  const [, country] = locale.split('_');\n  const timestamp = new Date().toISOString();\n\n  return {\n    locale,\n    country,\n    timestamp,\n    offset: 0,\n    limit: 9,\n  };\n};\n\nexport default defaultFilters;\n","import {\n  call, put, takeEvery, all, select,\n} from 'redux-saga/effects';\n\nimport * as TYPES from './types';\n\nimport { getPlaylists } from '../services/SpotifyApi';\nimport defaultFilters from '../components/defaultFilters';\n\nexport function* workerGetPlaylists() {\n  try {\n    const { keyword, ...filters } = yield select(state => state.filters);\n\n    const hasFilters = Object.keys(filters).length;\n    if (!hasFilters) {\n      yield put({ type: TYPES.SET_FILTERS, payload: defaultFilters() });\n    }\n\n    const { data: { playlists } } = yield call(getPlaylists, filters);\n\n    yield put({ type: TYPES.GET_PLAYLISTS_SUCCESS, payload: playlists });\n  } catch (error) {\n    yield put({ type: TYPES.GET_PLAYLISTS_FAILURE });\n  }\n}\n\nexport function* watchGetPlaylists() {\n  yield takeEvery(TYPES.GET_PLAYLISTS_REQUEST, workerGetPlaylists);\n}\n\nexport function* workerSetFilters(filters) {\n  yield put({ type: TYPES.SET_FILTERS, payload: filters });\n  yield put({ type: TYPES.GET_PLAYLISTS_REQUEST, payload: filters });\n}\n\nexport function* watchSetFilters() {\n  yield takeEvery(TYPES.SET_FILTERS, workerGetPlaylists);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    watchGetPlaylists(),\n    watchSetFilters(),\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from './reducers';\nimport rootSaga from './actions/saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, composeWithDevTools(\n  applyMiddleware(sagaMiddleware),\n));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Card from 'antd/lib/card';\nimport 'antd/lib/card/style/css';\n\nconst { Meta } = Card;\n\nconst PlaylistCard = ({\n  name,\n  image,\n  tracks,\n  link,\n}) => (\n    <a href={link}>\n      <Card\n        hoverable\n        style={{ marginTop: 24 }}\n        cover={<img alt={name} src={image} />}\n      >\n        <Meta title={name} description={`${tracks} músicas`} />\n      </Card>\n    </a>\n  );\n\nPlaylistCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  tracks: PropTypes.number.isRequired,\n  link: PropTypes.string.isRequired,\n};\n\nexport default PlaylistCard;\n","import store from '../store';\nimport * as TYPES from './types';\n\nexport const action = (type, payload) => store.dispatch({ type, payload });\n\nexport const getPlaylists = params => action(TYPES.GET_PLAYLISTS_REQUEST, params);\n\nexport const setFilters = params => action(TYPES.SET_FILTERS, params);\nexport const getFilters = () => action(TYPES.GET_FILTERS);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Col from 'antd/lib/col';\nimport 'antd/lib/col/style/css';\n\nimport Row from 'antd/lib/row';\nimport 'antd/lib/row/style/css';\n\nimport Alert from 'antd/lib/alert';\nimport 'antd/lib/alert/style/css';\n\nimport Spin from 'antd/lib/spin';\nimport 'antd/lib/spin/style/css';\n\nimport PlaylistCard from './PlaylistCard';\n\nimport { getPlaylists } from '../actions';\n\nconst Playlists = ({\n  playlists, keyword, loading, error,\n}) => {\n  useEffect(() => {\n    getPlaylists();\n  }, []);\n\n  const filterPlaylistByKeyword = playlist => playlist.name.toLocaleLowerCase().includes(keyword);\n\n  return (\n    <Spin tip=\"Carregando...\" spinning={loading} style={{ height: 150 }}>\n      {error && (\n        <Alert\n          style={{ marginTop: 48 }}\n          message=\"Ops... Algo deu errado\"\n          description=\"Estamos enfrentando problemas técnicos, por favor tente novamente mais tarde.\"\n          type=\"error\"\n          showIcon\n        />\n      )}\n      <Row gutter={24}>\n        {playlists.filter(filterPlaylistByKeyword).map(({\n          id, name, images, tracks, external_urls: externalUrls,\n        }) => (\n          <Col key={id} xs={24} xl={8}>\n            <PlaylistCard\n              id={id}\n              name={name}\n              image={images[0].url}\n              tracks={tracks.total}\n              link={externalUrls.spotify}\n            />\n          </Col>\n        ))}\n      </Row>\n    </Spin>\n  );\n};\n\nPlaylists.propTypes = {\n  playlists: PropTypes.array.isRequired,\n  keyword: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = ({ playlists, filters }) => ({\n  playlists: playlists.playlists,\n  error: playlists.error,\n  loading: playlists.loading,\n  keyword: filters.keyword,\n});\n\nexport default connect(mapStateToProps)(Playlists);\n","import axios from 'axios';\n\nimport { FILTER_API_BASE_URL } from '../constants';\n\nconst FilterApi = axios.create({\n  baseURL: FILTER_API_BASE_URL,\n});\n\nexport const getFilters = () => FilterApi.get('/');\n\nexport default FilterApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport moment from 'moment';\n\nimport Select from 'antd/lib/select';\nimport 'antd/lib/select/style/css';\n\nimport InputNumber from 'antd/lib/input-number';\nimport 'antd/lib/input-number/style/css';\n\nimport DatePicker from 'antd/lib/date-picker';\nimport 'antd/lib/date-picker/style/css';\n\nimport Form from 'antd/lib/form';\nimport 'antd/lib/form/style/css';\n\nimport Col from 'antd/lib/col';\nimport 'antd/lib/col/style/css';\n\nimport Row from 'antd/lib/row';\nimport 'antd/lib/row/style/css';\n\nimport { setFilters } from '../../actions';\n\nconst { Option } = Select;\nconst { Item } = Form;\n\nconst DynamicFilters = ({ filters, filterFields }) => {\n  const onChange = (id, value) => {\n    setFilters({ [id]: value });\n  };\n\n  const SelectComponent = ({\n    // eslint-disable-next-line react/prop-types\n    id, name, values,\n  }) => (\n      <Col sm={24} xl={6} key={id}>\n        <Item label={name}>\n          <Select\n            id={id}\n            onChange={value => onChange(id, value)}\n            value={filters[id]}\n            style={{ width: '100%' }}\n            placeholder={name}\n          >\n            {values.map(({ name: optionName, value }) => (\n              <Option key={optionName} value={value}>{optionName}</Option>\n            ))}\n          </Select>\n        </Item>\n      </Col>\n    );\n\n  const InputNumberComponent = ({\n    // eslint-disable-next-line react/prop-types\n    id, name, validation: { min, max },\n  }) => (\n      <Col sm={24} xl={6} key={id}>\n        <Item label={name}>\n          <InputNumber\n            id={id}\n            value={filters[id]}\n            min={min}\n            max={max}\n            onChange={value => onChange(id, value)}\n            placeholder={name}\n            style={{ width: '100%' }}\n          />\n        </Item>\n      </Col>\n    );\n\n  const DatePickerComponent = ({\n    // eslint-disable-next-line react/prop-types\n    id, name,\n  }) => (\n      <Col sm={24} xl={6} key={id}>\n        <Item label={name}>\n          <DatePicker\n            id={id}\n            showTime\n            onChange={value => onChange(id, value.toISOString())}\n            value={moment(filters[id])}\n            placeholder={name}\n            style={{ width: '100%' }}\n          />\n        </Item>\n      </Col>\n    );\n\n  const createFilterComponent = (filter) => {\n    const filterKeys = Object.keys(filter);\n\n    const isSelectComponent = filterKeys.includes('values');\n    if (isSelectComponent) {\n      return SelectComponent(filter);\n    }\n\n    const isDateComponent = (\n      filter.validation.primitiveType === 'STRING'\n      && filter.validation.entityType === 'DATE_TIME'\n    );\n    if (isDateComponent) {\n      return DatePickerComponent(filter);\n    }\n\n    const isNumberComponent = filter.validation.primitiveType === 'INTEGER';\n    if (isNumberComponent) {\n      return InputNumberComponent(filter);\n    }\n\n    return null;\n  };\n\n  return (\n    <Row gutter={8}>\n      {filterFields.map(createFilterComponent)}\n    </Row>\n  );\n};\n\nDynamicFilters.propTypes = {\n  filters: PropTypes.object.isRequired,\n  filterFields: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = ({ filters }) => ({\n  filters,\n});\n\nexport default connect(mapStateToProps)(DynamicFilters);\n","import React, { useEffect, useState } from 'react';\n\nimport Input from 'antd/lib/input';\nimport 'antd/lib/input/style/css';\n\nimport Collapse from 'antd/lib/collapse';\nimport 'antd/lib/collapse/style/css';\n\nimport Form from 'antd/lib/form';\nimport 'antd/lib/form/style/css';\n\nimport Spin from 'antd/lib/spin';\nimport 'antd/lib/spin/style/css';\n\nimport { getFilters } from '../../services/FilterApi';\nimport DynamicFilters from './DynamicFilters';\n\nimport { setFilters } from '../../actions';\n\nconst { Search } = Input;\nconst { Item } = Form;\nconst { Panel } = Collapse;\n\nconst Filters = () => {\n  const [filterFields, setFilterFields] = useState([]);\n  const [loadingAdvancedFilters, setLoadingAdvancedFilters] = useState(true);\n\n  useEffect(() => {\n    getFilters().then(({ data: { filters } }) => {\n      setLoadingAdvancedFilters(false);\n      setFilterFields(filters);\n    });\n  }, []);\n\n  return (\n    <div>\n      <Item label=\"Buscar playlists\">\n        <Search\n          id=\"search\"\n          size=\"large\"\n          placeholder=\"Busque suas playlists aqui!\"\n          onChange={event => setFilters({ keyword: event.target.value })}\n        />\n      </Item>\n\n      <Spin spinning={loadingAdvancedFilters} style={{ height: 50 }}>\n        <Collapse bordered={false}>\n          <Panel header=\"Filtros Avançados\">\n            <DynamicFilters filterFields={filterFields} />\n          </Panel>\n        </Collapse>\n      </Spin>\n    </div>\n  );\n};\n\n\nexport default Filters;\n","import Filters from './Filters';\n\nexport default Filters;\n","import React from 'react';\n\nimport Tipography from 'antd/lib/typography';\nimport 'antd/lib/typography/style/css';\n\nimport Col from 'antd/lib/col';\nimport 'antd/lib/col/style/css';\n\nimport Row from 'antd/lib/row';\nimport 'antd/lib/row/style/css';\n\nimport Playlists from '../components/Playlists';\nimport Filters from '../components/Filters';\n\nconst { Title } = Tipography;\n\nconst Home = () => (\n  <Row type=\"flex\" justify=\"center\">\n    <Col xs={22} xl={18}>\n      <Title style={{ marginTop: 48, fontSize: '3.7rem' }}>Spotifood</Title>\n      <div>\n        <Filters />\n        <Playlists />\n      </div>\n    </Col>\n  </Row>\n);\n\nexport default Home;\n","import React from 'react';\nimport spotifyLogo from './spotifyLogo.png';\nimport './SpotifyLogin.css';\n\nimport { getAuthUrl } from '../../services/SpotifyAuthenticationService';\n\nconst SpotifyLogin = () => (\n  <a tabstop=\"1\" className=\"spotify-login\" href={getAuthUrl()}>\n    <span aria-label=\"Entre com Spotify\">Entre com </span>\n    <img className=\"spotify-login__logo\" src={spotifyLogo} alt=\"Spotify Logo\" />\n  </a>\n);\n\nexport default SpotifyLogin;\n","import qs from 'qs';\n\nimport {\n  AUTH_ENDPOINT,\n  CLIENT_ID,\n  REDIRECT_URI,\n} from '../constants';\n\nexport const getTokenFromUrl = () => {\n  const authCredentials = qs.parse(window.location.hash.substr(1));\n  const token = authCredentials.access_token || null;\n  sessionStorage.setItem('token', token);\n\n  window.location.hash = '';\n\n  return token;\n};\n\nexport const getAuthUrl = () => `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=token&show_dialog=true`;\n","import React from 'react';\n\nimport SpotifyLogin from '../components/SpotifyLoginButton/SpotifyLogin';\nimport './Login.css';\n\nconst Login = () => (\n  <section className=\"login-container\">\n    <header className=\"login-container__title\">\n      Spotifood\n    </header>\n    <p className=\"login-container__description\">\n      Encontre as melhores playlists para aproveitar sua refeição!\n    </p>\n    <SpotifyLogin />\n  </section>\n);\n\nexport default Login;\n","import React, { useEffect, useState } from 'react';\n\nimport { getTokenFromUrl } from '../services/SpotifyAuthenticationService';\n\nimport Home from '../pages/Home';\nimport Login from '../pages/Login';\n\nconst SessionManager = () => {\n  const [token, setToken] = useState(null);\n\n  useEffect(() => {\n    setToken(getTokenFromUrl());\n  }, []);\n\n  const isAuthenticated = () => token !== null;\n\n  return (\n    <div>\n      {isAuthenticated()\n        ? <Home />\n        : <Login />\n      }\n    </div>\n  );\n};\n\nexport default SessionManager;\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nimport SessionManager from './components/SessionManager';\n\nconst App = () => (\n  <Provider store={store}>\n    <SessionManager />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}